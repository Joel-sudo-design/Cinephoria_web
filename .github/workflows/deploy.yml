name: CI-CD Prod

on:
  push:
    branches: ["master"]
  workflow_dispatch: {}

concurrency:
  group: "deploy-prod"
  cancel-in-progress: false

env:
  IMAGE_NAME: ghcr.io/joel-sudo-design/cinephoria_web/app

jobs:
  build-and-push:
    name: Build & Push image to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_ENV=prod

  deploy:
    name: Deploy on OVH (user debian + sudo docker)
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout (compose + Caddyfile)
        uses: actions/checkout@v4

      - name: Ensure remote dir exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: debian
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            set -Eeuo pipefail
            mkdir -p /home/debian/apps/cinephoria

      - name: Upload compose & Caddyfile
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: debian
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.prod.yml,Caddyfile"
          target: "/home/debian/apps/cinephoria/"
          overwrite: true
          rm: true
          debug: true

      - name: SSH deploy (sudo docker, debug)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: debian
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          envs: GITHUB_TOKEN
          script: |
            set -Eeuo pipefail
            set -x

            APP_DIR="/home/debian/apps/cinephoria"
            COMPOSE_FILE="docker-compose.prod.yml"

            # Vérifs dossiers/fichiers
            ls -la "$APP_DIR" || true
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            test -f "$COMPOSE_FILE" || { echo "Compose manquant: $COMPOSE_FILE"; exit 2; }
            test -f "Caddyfile"     || { echo "Caddyfile manquant"; exit 2; }

            # .env (sécurisé)
            umask 177
            cat > .env <<'EOF'
            ${{ secrets.PROD_ENV }}
            EOF
            chmod 600 .env
            head -n 1 .env || true

            # Vérifier docker côté root + compose dispo
            sudo docker version
            if sudo docker compose version >/dev/null 2>&1; then
              COMPOSE="sudo docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              COMPOSE="sudo docker-compose"
            else
              echo "Ni 'docker compose' ni 'docker-compose' pour root." >&2
              sudo ls -l /usr/lib/docker/cli-plugins || true
              sudo ls -l /usr/libexec/docker/cli-plugins || true
              exit 3
            fi

            # Login GHCR en root
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Déploiement
            $COMPOSE -f "$COMPOSE_FILE" --env-file .env up -d --pull always --remove-orphans

            # Contrôles
            $COMPOSE ps
            sudo docker image prune -f || true

            echo "DEPLOY OK"

