##########################
# Stage 0 : Assets (Node)
##########################
FROM node:20-alpine AS assets
WORKDIR /app
ENV NODE_ENV=production

# Installe uniquement selon le lockfile présent
COPY package.json yarn.lock* package-lock.json* ./
RUN corepack enable || true
RUN if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
    elif [ -f package-lock.json ]; then npm ci; else npm i; fi

# Sources front + configs de build
COPY assets ./assets
COPY webpack.config.js ./

# Build des assets -> /app/public/build
RUN if [ -f yarn.lock ]; then yarn build; else npm run build; fi

##########################
# Stage 1 : PHP builder
##########################
FROM php:8.3-fpm AS php-builder

# Build deps pour extensions
RUN apt-get update && apt-get install -y --no-install-recommends \
      libzip-dev zip unzip git curl ca-certificates \
      libjpeg62-turbo-dev libpng-dev libfreetype6-dev \
      libssl-dev pkg-config autoconf make g++ \
  && docker-php-ext-configure gd --with-freetype --with-jpeg \
  && docker-php-ext-install -j"$(nproc)" gd zip pdo pdo_mysql

# PECL mongodb (compile ici)
RUN pecl install mongodb \
  && docker-php-ext-enable mongodb

# Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/Cinephoria_web

# Déps PHP d'abord pour profiter du cache
COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Code source
COPY . .

# Copie le build front pré-compilé
COPY --from=assets /app/public/build ./public/build

# (optionnel) scripts composer si tu en as besoin en prod:
# RUN composer run-script post-install-cmd || true
# (optionnel) warmup cache symfony:
# RUN php bin/console cache:warmup --env=prod


##########################
# Stage 2 : PHP runtime
##########################
FROM php:8.3-fpm AS php-runtime

# Runtime libs (sans build deps)
RUN apt-get update && apt-get install -y --no-install-recommends \
      libjpeg62-turbo libpng16-16 libfreetype6 libzip4 ca-certificates \
  && rm -rf /var/lib/apt/lists/*

# Copier le code + binaires PHP depuis le builder
WORKDIR /var/www/Cinephoria_web
COPY --from=php-builder /usr/local/etc/php/conf.d/docker-php-ext-gd.ini /usr/local/etc/php/conf.d/
COPY --from=php-builder /usr/local/etc/php/conf.d/docker-php-ext-zip.ini /usr/local/etc/php/conf.d/
COPY --from=php-builder /usr/local/etc/php/conf.d/docker-php-ext-pdo_mysql.ini /usr/local/etc/php/conf.d/
COPY --from=php-builder /usr/local/etc/php/conf.d/docker-php-ext-mongodb.ini /usr/local/etc/php/conf.d/
COPY --from=php-builder /usr/local/lib/php/extensions /usr/local/lib/php/extensions
COPY --from=php-builder /usr/bin/composer /usr/bin/composer
COPY --from=php-builder /var/www/Cinephoria_web /var/www/Cinephoria_web

# OPcache (prod)
RUN { \
  echo "opcache.enable=1"; \
  echo "opcache.enable_cli=1"; \
  echo "opcache.jit=1255"; \
  echo "opcache.jit_buffer_size=64M"; \
  echo "opcache.memory_consumption=256"; \
  echo "opcache.max_accelerated_files=20000"; \
} > /usr/local/etc/php/conf.d/opcache.ini

# wait-for-it + entrypoint (sans build front)
COPY wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN sed -i 's/\r$//' /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/entrypoint.sh

EXPOSE 9000
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
