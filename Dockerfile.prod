##########################
# Stage 0 : Assets (Node)
##########################
FROM node:20-alpine AS assets
WORKDIR /app
ENV NODE_ENV=production
COPY package.json yarn.lock* package-lock.json* ./
RUN corepack enable || true
RUN if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
    elif [ -f package-lock.json ]; then npm ci; else npm i; fi
COPY assets ./assets
COPY webpack.config.js ./
RUN if [ -f yarn.lock ]; then yarn build; else npm run build; fi
# => /app/public/build prêt

##########################
# Stage 1 : PHP builder
##########################
FROM php:8.3-fpm AS builder
RUN apt-get update && apt-get install -y --no-install-recommends \
    libzip-dev zip unzip git curl ca-certificates \
    libjpeg62-turbo-dev libpng-dev libfreetype6-dev \
    libssl-dev pkg-config autoconf make g++ \
 && docker-php-ext-configure gd --with-freetype --with-jpeg \
 && docker-php-ext-install -j"$(nproc)" gd zip pdo pdo_mysql

# PECL mongodb (compile ici, une seule fois)
RUN pecl install mongodb && docker-php-ext-enable mongodb

# Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/Cinephoria_web
COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader --no-scripts
COPY . .
# Copie le build front précompilé
COPY --from=assets /app/public/build ./public/build

##########################
# Stage 2 : PHP runtime
##########################
FROM php:8.3-fpm AS runtime
# libs runtime (pas les -dev, pas de toolchain)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libjpeg62-turbo libpng16-16 libfreetype6 libzip4 ca-certificates \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /var/www/Cinephoria_web

# Copie des extensions déjà compilées et config PHP depuis builder
COPY --from=builder /usr/local/lib/php/extensions /usr/local/lib/php/extensions
COPY --from=builder /usr/local/etc/php/conf.d/docker-php-ext-gd.ini /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/etc/php/conf.d/docker-php-ext-zip.ini /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/etc/php/conf.d/docker-php-ext-pdo_mysql.ini /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/etc/php/conf.d/docker-php-ext-mongodb.ini /usr/local/etc/php/conf.d/
COPY --from=builder /usr/bin/composer /usr/bin/composer
COPY --from=builder /var/www/Cinephoria_web /var/www/Cinephoria_web

# OPcache
RUN { \
  echo "opcache.enable=1"; \
  echo "opcache.enable_cli=1"; \
  echo "opcache.jit=1255"; \
  echo "opcache.jit_buffer_size=64M"; \
  echo "opcache.memory_consumption=256"; \
  echo "opcache.max_accelerated_files=20000"; \
} > /usr/local/etc/php/conf.d/opcache.ini

# wait-for-it + entrypoint (sans build front)
COPY wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN sed -i 's/\r$//' /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/entrypoint.sh

EXPOSE 9000
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
